//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/5/2017 5:59:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DvdrentalContext
{

    [DatabaseAttribute(Name = "dvdrental")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class DvdrentalDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DvdrentalDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertStaff(Staff instance);
        partial void UpdateStaff(Staff instance);
        partial void DeleteStaff(Staff instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertFilmCategory(FilmCategory instance);
        partial void UpdateFilmCategory(FilmCategory instance);
        partial void DeleteFilmCategory(FilmCategory instance);
        partial void InsertCountry(Country instance);
        partial void UpdateCountry(Country instance);
        partial void DeleteCountry(Country instance);
        partial void InsertActor(Actor instance);
        partial void UpdateActor(Actor instance);
        partial void DeleteActor(Actor instance);
        partial void InsertLanguage(Language instance);
        partial void UpdateLanguage(Language instance);
        partial void DeleteLanguage(Language instance);
        partial void InsertInventory(Inventory instance);
        partial void UpdateInventory(Inventory instance);
        partial void DeleteInventory(Inventory instance);
        partial void InsertPayment(Payment instance);
        partial void UpdatePayment(Payment instance);
        partial void DeletePayment(Payment instance);
        partial void InsertRental(Rental instance);
        partial void UpdateRental(Rental instance);
        partial void DeleteRental(Rental instance);
        partial void InsertCity(City instance);
        partial void UpdateCity(City instance);
        partial void DeleteCity(City instance);

        #endregion

        public DvdrentalDataContext() :
        base(GetConnectionString("DvdrentalDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DvdrentalDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DvdrentalDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DvdrentalDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DvdrentalDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DvdrentalDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DvdrentalDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Staff> Staffs
        {
            get
            {
                return this.GetTable<Staff>();
            }
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<FilmCategory> FilmCategories
        {
            get
            {
                return this.GetTable<FilmCategory>();
            }
        }

        public Devart.Data.Linq.Table<Country> Countries
        {
            get
            {
                return this.GetTable<Country>();
            }
        }

        public Devart.Data.Linq.Table<Actor> Actors
        {
            get
            {
                return this.GetTable<Actor>();
            }
        }

        public Devart.Data.Linq.Table<Language> Languages
        {
            get
            {
                return this.GetTable<Language>();
            }
        }

        public Devart.Data.Linq.Table<Inventory> Inventories
        {
            get
            {
                return this.GetTable<Inventory>();
            }
        }

        public Devart.Data.Linq.Table<Payment> Payments
        {
            get
            {
                return this.GetTable<Payment>();
            }
        }

        public Devart.Data.Linq.Table<Rental> Rentals
        {
            get
            {
                return this.GetTable<Rental>();
            }
        }

        public Devart.Data.Linq.Table<City> Cities
        {
            get
            {
                return this.GetTable<City>();
            }
        }
    }
}

namespace DvdrentalContext
{

    /// <summary>
    /// There are no comments for DvdrentalContext.Staff in the schema.
    /// </summary>
    [Table(Name = @"public.staff")]
    public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _StaffId;

        private string _FirstName;

        private string _LastName;

        private short _AddressId;

        private string _Email;

        private short _StoreId;

        private bool _Active = true;

        private string _Username;

        private string _Password;

        private System.DateTime _LastUpdate;

        private byte[] _Picture;
        #pragma warning restore 0649

        private EntitySet<Payment> _Payments;

        private EntitySet<Rental> _Rentals;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStaffIdChanging(int value);
        partial void OnStaffIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnAddressIdChanging(short value);
        partial void OnAddressIdChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnStoreIdChanging(short value);
        partial void OnStoreIdChanged();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();
        #endregion

        public Staff()
        {
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StaffId in the schema.
        /// </summary>
        [Column(Name = @"staff_id", Storage = "_StaffId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int StaffId
        {
            get
            {
                return this._StaffId;
            }
            set
            {
                if (this._StaffId != value)
                {
                    this.OnStaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._StaffId = value;
                    this.SendPropertyChanged("StaffId");
                    this.OnStaffIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"first_name", Storage = "_FirstName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"last_name", Storage = "_LastName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging();
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"""password""", Storage = "_Password", DbType = "VARCHAR(40)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Picture in the schema.
        /// </summary>
        [Column(Name = @"picture", Storage = "_Picture", DbType = "BYTEA", UpdateCheck = UpdateCheck.Never)]
        public byte[] Picture
        {
            get
            {
                return this._Picture;
            }
            set
            {
                if (this._Picture != value)
                {
                    this.OnPictureChanging(value);
                    this.SendPropertyChanging();
                    this._Picture = value;
                    this.SendPropertyChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_Payment", Storage="_Payments", ThisKey="StaffId", OtherKey="StaffId", DeleteRule="RESTRICT")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Rentals in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_Rental", Storage="_Rentals", ThisKey="StaffId", OtherKey="StaffId", DeleteRule="NO ACTION")]
        public EntitySet<Rental> Rentals
        {
            get
            {
                return this._Rentals;
            }
            set
            {
                this._Rentals.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Staff = this;
        }
    
        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Staff = null;
        }

        private void attach_Rentals(Rental entity)
        {
            this.SendPropertyChanging("Rentals");
            entity.Staff = this;
        }
    
        private void detach_Rentals(Rental entity)
        {
            this.SendPropertyChanging("Rentals");
            entity.Staff = null;
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Category in the schema.
    /// </summary>
    [Table(Name = @"public.category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private string _Name;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649

        private EntitySet<FilmCategory> _FilmCategories;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public Category()
        {
            this._FilmCategories = new EntitySet<FilmCategory>(new Action<FilmCategory>(this.attach_FilmCategories), new Action<FilmCategory>(this.detach_FilmCategories));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilmCategories in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_FilmCategory", Storage="_FilmCategories", ThisKey="CategoryId", OtherKey="CategoryId", DeleteRule="RESTRICT")]
        public EntitySet<FilmCategory> FilmCategories
        {
            get
            {
                return this._FilmCategories;
            }
            set
            {
                this._FilmCategories.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_FilmCategories(FilmCategory entity)
        {
            this.SendPropertyChanging("FilmCategories");
            entity.Category = this;
        }
    
        private void detach_FilmCategories(FilmCategory entity)
        {
            this.SendPropertyChanging("FilmCategories");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.FilmCategory in the schema.
    /// </summary>
    [Table(Name = @"public.film_category")]
    public partial class FilmCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _FilmId;

        private int _CategoryId;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649

        private EntityRef<Category> _Category;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFilmIdChanging(short value);
        partial void OnFilmIdChanged();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public FilmCategory()
        {
            this._Category  = default(EntityRef<Category>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FilmId in the schema.
        /// </summary>
        [Column(Name = @"film_id", Storage = "_FilmId", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short FilmId
        {
            get
            {
                return this._FilmId;
            }
            set
            {
                if (this._FilmId != value)
                {
                    this.OnFilmIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilmId = value;
                    this.SendPropertyChanged("FilmId");
                    this.OnFilmIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_FilmCategory", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.FilmCategories.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.CategoryId;
                        value.FilmCategories.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(int);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Country in the schema.
    /// </summary>
    [Table(Name = @"public.country")]
    public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CountryId;

        private string _Country1;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649

        private EntitySet<City> _Cities;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnCountry1Changing(string value);
        partial void OnCountry1Changed();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public Country()
        {
            this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country1 in the schema.
        /// </summary>
        [Column(Name = @"country", Storage = "_Country1", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country1
        {
            get
            {
                return this._Country1;
            }
            set
            {
                if (this._Country1 != value)
                {
                    this.OnCountry1Changing(value);
                    this.SendPropertyChanging();
                    this._Country1 = value;
                    this.SendPropertyChanged("Country1");
                    this.OnCountry1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_City", Storage="_Cities", ThisKey="CountryId", OtherKey="CountryId", DeleteRule="NO ACTION")]
        public EntitySet<City> Cities
        {
            get
            {
                return this._Cities;
            }
            set
            {
                this._Cities.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Cities(City entity)
        {
            this.SendPropertyChanging("Cities");
            entity.Country = this;
        }
    
        private void detach_Cities(City entity)
        {
            this.SendPropertyChanging("Cities");
            entity.Country = null;
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Actor in the schema.
    /// </summary>
    [Table(Name = @"public.actor")]
    public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ActorId;

        private string _FirstName;

        private string _LastName;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnActorIdChanging(int value);
        partial void OnActorIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public Actor()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ActorId in the schema.
        /// </summary>
        [Column(Name = @"actor_id", Storage = "_ActorId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int ActorId
        {
            get
            {
                return this._ActorId;
            }
            set
            {
                if (this._ActorId != value)
                {
                    this.OnActorIdChanging(value);
                    this.SendPropertyChanging();
                    this._ActorId = value;
                    this.SendPropertyChanged("ActorId");
                    this.OnActorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"first_name", Storage = "_FirstName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"last_name", Storage = "_LastName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Language in the schema.
    /// </summary>
    [Table(Name = @"public.""language""")]
    public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LanguageId;

        private string _Name;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLanguageIdChanging(int value);
        partial void OnLanguageIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public Language()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", CanBeNull = false, DbType = "CHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Inventory in the schema.
    /// </summary>
    [Table(Name = @"public.inventory")]
    public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _InventoryId;

        private short _FilmId;

        private short _StoreId;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649

        private EntitySet<Rental> _Rentals;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnInventoryIdChanging(int value);
        partial void OnInventoryIdChanged();
        partial void OnFilmIdChanging(short value);
        partial void OnFilmIdChanged();
        partial void OnStoreIdChanging(short value);
        partial void OnStoreIdChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public Inventory()
        {
            this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for InventoryId in the schema.
        /// </summary>
        [Column(Name = @"inventory_id", Storage = "_InventoryId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int InventoryId
        {
            get
            {
                return this._InventoryId;
            }
            set
            {
                if (this._InventoryId != value)
                {
                    this.OnInventoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryId = value;
                    this.SendPropertyChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilmId in the schema.
        /// </summary>
        [Column(Name = @"film_id", Storage = "_FilmId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short FilmId
        {
            get
            {
                return this._FilmId;
            }
            set
            {
                if (this._FilmId != value)
                {
                    this.OnFilmIdChanging(value);
                    this.SendPropertyChanging();
                    this._FilmId = value;
                    this.SendPropertyChanged("FilmId");
                    this.OnFilmIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"store_id", Storage = "_StoreId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rentals in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Inventory_Rental", Storage="_Rentals", ThisKey="InventoryId", OtherKey="InventoryId", DeleteRule="RESTRICT")]
        public EntitySet<Rental> Rentals
        {
            get
            {
                return this._Rentals;
            }
            set
            {
                this._Rentals.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Rentals(Rental entity)
        {
            this.SendPropertyChanging("Rentals");
            entity.Inventory = this;
        }
    
        private void detach_Rentals(Rental entity)
        {
            this.SendPropertyChanging("Rentals");
            entity.Inventory = null;
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Payment in the schema.
    /// </summary>
    [Table(Name = @"public.payment")]
    public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PaymentId;

        private short _CustomerId;

        private int _StaffId;

        private int _RentalId;

        private decimal _Amount;

        private System.DateTime _PaymentDate;
        #pragma warning restore 0649

        private EntityRef<Staff> _Staff;

        private EntityRef<Rental> _Rental;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPaymentIdChanging(int value);
        partial void OnPaymentIdChanged();
        partial void OnCustomerIdChanging(short value);
        partial void OnCustomerIdChanged();
        partial void OnStaffIdChanging(int value);
        partial void OnStaffIdChanged();
        partial void OnRentalIdChanging(int value);
        partial void OnRentalIdChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnPaymentDateChanging(System.DateTime value);
        partial void OnPaymentDateChanged();
        #endregion

        public Payment()
        {
            this._Staff  = default(EntityRef<Staff>);
            this._Rental  = default(EntityRef<Rental>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PaymentId in the schema.
        /// </summary>
        [Column(Name = @"payment_id", Storage = "_PaymentId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int PaymentId
        {
            get
            {
                return this._PaymentId;
            }
            set
            {
                if (this._PaymentId != value)
                {
                    this.OnPaymentIdChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentId = value;
                    this.SendPropertyChanged("PaymentId");
                    this.OnPaymentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StaffId in the schema.
        /// </summary>
        [Column(Name = @"staff_id", Storage = "_StaffId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StaffId
        {
            get
            {
                return this._StaffId;
            }
            set
            {
                if (this._StaffId != value)
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._StaffId = value;
                    this.SendPropertyChanged("StaffId");
                    this.OnStaffIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RentalId in the schema.
        /// </summary>
        [Column(Name = @"rental_id", Storage = "_RentalId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RentalId
        {
            get
            {
                return this._RentalId;
            }
            set
            {
                if (this._RentalId != value)
                {
                    if (this._Rental.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRentalIdChanging(value);
                    this.SendPropertyChanging();
                    this._RentalId = value;
                    this.SendPropertyChanged("RentalId");
                    this.OnRentalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "NUMERIC(5,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentDate in the schema.
        /// </summary>
        [Column(Name = @"payment_date", Storage = "_PaymentDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_Payment", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if ((previousValue != value) || (this._Staff.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Staff.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if (value != null)
                    {
                        this._StaffId = value.StaffId;
                        value.Payments.Add(this);
                    }
                    else
                    {
                        this._StaffId = default(int);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rental in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Rental_Payment", Storage="_Rental", ThisKey="RentalId", OtherKey="RentalId", IsForeignKey=true)]
        public Rental Rental
        {
            get
            {
                return this._Rental.Entity;
            }
            set
            {
                Rental previousValue = this._Rental.Entity;
                if ((previousValue != value) || (this._Rental.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Rental.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Rental.Entity = value;
                    if (value != null)
                    {
                        this._RentalId = value.RentalId;
                        value.Payments.Add(this);
                    }
                    else
                    {
                        this._RentalId = default(int);
                    }
                    this.SendPropertyChanged("Rental");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.Rental in the schema.
    /// </summary>
    [Table(Name = @"public.rental")]
    public partial class Rental : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RentalId;

        private System.DateTime _RentalDate;

        private int _InventoryId;

        private short _CustomerId;

        private System.Nullable<System.DateTime> _ReturnDate;

        private int _StaffId;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649

        private EntityRef<Staff> _Staff;

        private EntityRef<Inventory> _Inventory;

        private EntitySet<Payment> _Payments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRentalIdChanging(int value);
        partial void OnRentalIdChanged();
        partial void OnRentalDateChanging(System.DateTime value);
        partial void OnRentalDateChanged();
        partial void OnInventoryIdChanging(int value);
        partial void OnInventoryIdChanged();
        partial void OnCustomerIdChanging(short value);
        partial void OnCustomerIdChanged();
        partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
        partial void OnReturnDateChanged();
        partial void OnStaffIdChanging(int value);
        partial void OnStaffIdChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public Rental()
        {
            this._Staff  = default(EntityRef<Staff>);
            this._Inventory  = default(EntityRef<Inventory>);
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RentalId in the schema.
        /// </summary>
        [Column(Name = @"rental_id", Storage = "_RentalId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int RentalId
        {
            get
            {
                return this._RentalId;
            }
            set
            {
                if (this._RentalId != value)
                {
                    this.OnRentalIdChanging(value);
                    this.SendPropertyChanging();
                    this._RentalId = value;
                    this.SendPropertyChanged("RentalId");
                    this.OnRentalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RentalDate in the schema.
        /// </summary>
        [Column(Name = @"rental_date", Storage = "_RentalDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime RentalDate
        {
            get
            {
                return this._RentalDate;
            }
            set
            {
                if (this._RentalDate != value)
                {
                    this.OnRentalDateChanging(value);
                    this.SendPropertyChanging();
                    this._RentalDate = value;
                    this.SendPropertyChanged("RentalDate");
                    this.OnRentalDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InventoryId in the schema.
        /// </summary>
        [Column(Name = @"inventory_id", Storage = "_InventoryId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InventoryId
        {
            get
            {
                return this._InventoryId;
            }
            set
            {
                if (this._InventoryId != value)
                {
                    if (this._Inventory.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnInventoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryId = value;
                    this.SendPropertyChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnDate in the schema.
        /// </summary>
        [Column(Name = @"return_date", Storage = "_ReturnDate", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ReturnDate
        {
            get
            {
                return this._ReturnDate;
            }
            set
            {
                if (this._ReturnDate != value)
                {
                    this.OnReturnDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnDate = value;
                    this.SendPropertyChanged("ReturnDate");
                    this.OnReturnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StaffId in the schema.
        /// </summary>
        [Column(Name = @"staff_id", Storage = "_StaffId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StaffId
        {
            get
            {
                return this._StaffId;
            }
            set
            {
                if (this._StaffId != value)
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._StaffId = value;
                    this.SendPropertyChanged("StaffId");
                    this.OnStaffIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_Rental", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if ((previousValue != value) || (this._Staff.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Staff.Entity = null;
                        previousValue.Rentals.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if (value != null)
                    {
                        this._StaffId = value.StaffId;
                        value.Rentals.Add(this);
                    }
                    else
                    {
                        this._StaffId = default(int);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Inventory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Inventory_Rental", Storage="_Inventory", ThisKey="InventoryId", OtherKey="InventoryId", IsForeignKey=true)]
        public Inventory Inventory
        {
            get
            {
                return this._Inventory.Entity;
            }
            set
            {
                Inventory previousValue = this._Inventory.Entity;
                if ((previousValue != value) || (this._Inventory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Inventory.Entity = null;
                        previousValue.Rentals.Remove(this);
                    }
                    this._Inventory.Entity = value;
                    if (value != null)
                    {
                        this._InventoryId = value.InventoryId;
                        value.Rentals.Add(this);
                    }
                    else
                    {
                        this._InventoryId = default(int);
                    }
                    this.SendPropertyChanged("Inventory");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Rental_Payment", Storage="_Payments", ThisKey="RentalId", OtherKey="RentalId", DeleteRule="SET NULL")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Rental = this;
        }
    
        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Rental = null;
        }
    }

    /// <summary>
    /// There are no comments for DvdrentalContext.City in the schema.
    /// </summary>
    [Table(Name = @"public.city")]
    public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CityId;

        private string _City1;

        private int _CountryId;

        private System.DateTime _LastUpdate;
        #pragma warning restore 0649

        private EntityRef<Country> _Country;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCityIdChanging(int value);
        partial void OnCityIdChanged();
        partial void OnCity1Changing(string value);
        partial void OnCity1Changed();
        partial void OnCountryIdChanging(int value);
        partial void OnCountryIdChanged();
        partial void OnLastUpdateChanging(System.DateTime value);
        partial void OnLastUpdateChanged();
        #endregion

        public City()
        {
            this._Country  = default(EntityRef<Country>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CityId in the schema.
        /// </summary>
        [Column(Name = @"city_id", Storage = "_CityId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int CityId
        {
            get
            {
                return this._CityId;
            }
            set
            {
                if (this._CityId != value)
                {
                    this.OnCityIdChanging(value);
                    this.SendPropertyChanging();
                    this._CityId = value;
                    this.SendPropertyChanged("CityId");
                    this.OnCityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City1 in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City1", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City1
        {
            get
            {
                return this._City1;
            }
            set
            {
                if (this._City1 != value)
                {
                    this.OnCity1Changing(value);
                    this.SendPropertyChanging();
                    this._City1 = value;
                    this.SendPropertyChanged("City1");
                    this.OnCity1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdate in the schema.
        /// </summary>
        [Column(Name = @"last_update", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdate
        {
            get
            {
                return this._LastUpdate;
            }
            set
            {
                if (this._LastUpdate != value)
                {
                    this.OnLastUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdate = value;
                    this.SendPropertyChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_City", Storage="_Country", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
        public Country Country
        {
            get
            {
                return this._Country.Entity;
            }
            set
            {
                Country previousValue = this._Country.Entity;
                if ((previousValue != value) || (this._Country.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Country.Entity = null;
                        previousValue.Cities.Remove(this);
                    }
                    this._Country.Entity = value;
                    if (value != null)
                    {
                        this._CountryId = value.CountryId;
                        value.Cities.Add(this);
                    }
                    else
                    {
                        this._CountryId = default(int);
                    }
                    this.SendPropertyChanged("Country");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
